// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: strangelove_ventures/poa/v1/params.proto

package poa

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// Array of addresses that are allowed to control the chains validators power.
	Admins []string `protobuf:"bytes,1,rep,name=admins,proto3" json:"admins,omitempty"`
	// allow_validator_self_exit allows for a valdiator to remove themselves from the validator set.
	AllowValidatorSelfExit bool `protobuf:"varint,2,opt,name=allow_validator_self_exit,json=allowValidatorSelfExit,proto3" json:"allow_validator_self_exit,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1333a19bedb70c3, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetAdmins() []string {
	if m != nil {
		return m.Admins
	}
	return nil
}

func (m *Params) GetAllowValidatorSelfExit() bool {
	if m != nil {
		return m.AllowValidatorSelfExit
	}
	return false
}

// StakingParams defines the parameters for the x/staking module.
type StakingParams struct {
	// unbonding_time is the time duration of unbonding.
	UnbondingTime time.Duration `protobuf:"bytes,1,opt,name=unbonding_time,json=unbondingTime,proto3,stdduration" json:"unbonding_time"`
	// max_validators is the maximum number of validators.
	MaxValidators uint32 `protobuf:"varint,2,opt,name=max_validators,json=maxValidators,proto3" json:"max_validators,omitempty"`
	// max_entries is the max entries for either unbonding delegation or
	// redelegation (per pair/trio).
	MaxEntries uint32 `protobuf:"varint,3,opt,name=max_entries,json=maxEntries,proto3" json:"max_entries,omitempty"`
	// historical_entries is the number of historical entries to persist.
	HistoricalEntries uint32 `protobuf:"varint,4,opt,name=historical_entries,json=historicalEntries,proto3" json:"historical_entries,omitempty"`
	// bond_denom defines the bondable coin denomination.
	BondDenom string `protobuf:"bytes,5,opt,name=bond_denom,json=bondDenom,proto3" json:"bond_denom,omitempty"`
	// min_commission_rate is the chain-wide minimum commission rate that a
	// validator can charge their delegators
	MinCommissionRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=min_commission_rate,json=minCommissionRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"min_commission_rate" yaml:"min_commission_rate"`
}

func (m *StakingParams) Reset()         { *m = StakingParams{} }
func (m *StakingParams) String() string { return proto.CompactTextString(m) }
func (*StakingParams) ProtoMessage()    {}
func (*StakingParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1333a19bedb70c3, []int{1}
}
func (m *StakingParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingParams.Merge(m, src)
}
func (m *StakingParams) XXX_Size() int {
	return m.Size()
}
func (m *StakingParams) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingParams.DiscardUnknown(m)
}

var xxx_messageInfo_StakingParams proto.InternalMessageInfo

func (m *StakingParams) GetUnbondingTime() time.Duration {
	if m != nil {
		return m.UnbondingTime
	}
	return 0
}

func (m *StakingParams) GetMaxValidators() uint32 {
	if m != nil {
		return m.MaxValidators
	}
	return 0
}

func (m *StakingParams) GetMaxEntries() uint32 {
	if m != nil {
		return m.MaxEntries
	}
	return 0
}

func (m *StakingParams) GetHistoricalEntries() uint32 {
	if m != nil {
		return m.HistoricalEntries
	}
	return 0
}

func (m *StakingParams) GetBondDenom() string {
	if m != nil {
		return m.BondDenom
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "strangelove_ventures.poa.v1.Params")
	proto.RegisterType((*StakingParams)(nil), "strangelove_ventures.poa.v1.StakingParams")
}

func init() {
	proto.RegisterFile("strangelove_ventures/poa/v1/params.proto", fileDescriptor_b1333a19bedb70c3)
}

var fileDescriptor_b1333a19bedb70c3 = []byte{
	// 535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xb1, 0x6f, 0xd3, 0x40,
	0x14, 0xc6, 0x73, 0x14, 0x22, 0x7a, 0x55, 0x2a, 0xd5, 0xa0, 0xe2, 0xa4, 0xc2, 0x8e, 0x02, 0x48,
	0x51, 0xa5, 0xf8, 0x54, 0x98, 0x88, 0xc4, 0x12, 0xd2, 0x0d, 0x09, 0xe4, 0x56, 0x0c, 0x2c, 0xd6,
	0xc5, 0xbe, 0x38, 0xa7, 0xf8, 0xee, 0x45, 0xbe, 0x4b, 0x70, 0x77, 0x26, 0x26, 0xc6, 0x8e, 0x95,
	0x58, 0x18, 0x3b, 0xf0, 0x47, 0x74, 0xac, 0x98, 0x10, 0x43, 0x40, 0xc9, 0x50, 0x66, 0xfe, 0x02,
	0x64, 0x9f, 0x93, 0x76, 0xe8, 0x62, 0xf9, 0xbd, 0xf7, 0xbb, 0xbb, 0xef, 0xbb, 0xef, 0x70, 0x5b,
	0xe9, 0x94, 0xca, 0x98, 0x25, 0x30, 0x63, 0xc1, 0x8c, 0x49, 0x3d, 0x4d, 0x99, 0x22, 0x13, 0xa0,
	0x64, 0x76, 0x40, 0x26, 0x34, 0xa5, 0x42, 0x79, 0x93, 0x14, 0x34, 0x58, 0x7b, 0xb7, 0x91, 0xde,
	0x04, 0xa8, 0x37, 0x3b, 0x68, 0x3c, 0x8c, 0x21, 0x86, 0x82, 0x23, 0xf9, 0x9f, 0x59, 0xd2, 0xd8,
	0xa1, 0x82, 0x4b, 0x20, 0xc5, 0xb7, 0x6c, 0x39, 0x31, 0x40, 0x9c, 0x30, 0x52, 0x54, 0x83, 0xe9,
	0x90, 0x44, 0xd3, 0x94, 0x6a, 0x0e, 0xb2, 0x9c, 0xd7, 0x43, 0x50, 0x02, 0x54, 0x60, 0xf6, 0x32,
	0x85, 0x19, 0xb5, 0x34, 0xae, 0xbe, 0x2b, 0x04, 0x59, 0xbb, 0xb8, 0x4a, 0x23, 0xc1, 0xa5, 0xb2,
	0x51, 0x73, 0xa3, 0xbd, 0xe9, 0x97, 0x95, 0xf5, 0x12, 0xd7, 0x69, 0x92, 0xc0, 0xc7, 0x60, 0x46,
	0x13, 0x1e, 0x51, 0x0d, 0x69, 0xa0, 0x58, 0x32, 0x0c, 0x58, 0xc6, 0xb5, 0x7d, 0xa7, 0x89, 0xda,
	0xf7, 0xfd, 0xdd, 0x02, 0x78, 0xbf, 0x9a, 0x1f, 0xb1, 0x64, 0x78, 0x98, 0x71, 0xdd, 0x7d, 0x74,
	0x7a, 0xe6, 0x56, 0xfe, 0x9e, 0xb9, 0xe8, 0xf3, 0xd5, 0xf9, 0x3e, 0xce, 0xfd, 0x1b, 0xf3, 0xad,
	0xaf, 0x1b, 0xb8, 0x76, 0xa4, 0xe9, 0x98, 0xcb, 0xb8, 0x3c, 0xfd, 0x2d, 0xde, 0x9e, 0xca, 0x01,
	0xc8, 0x88, 0xcb, 0x38, 0xd0, 0x5c, 0x30, 0x1b, 0x35, 0x51, 0x7b, 0xeb, 0x79, 0xdd, 0x33, 0xde,
	0xbc, 0x95, 0x37, 0xaf, 0x5f, 0x7a, 0xeb, 0xd5, 0x2e, 0xe6, 0x6e, 0xe5, 0xf4, 0xb7, 0x8b, 0xbe,
	0x5d, 0x9d, 0xef, 0x23, 0xbf, 0xb6, 0x5e, 0x7f, 0xcc, 0x05, 0xb3, 0x9e, 0xe1, 0x6d, 0x41, 0xb3,
	0x6b, 0xd1, 0xaa, 0xd0, 0x5a, 0xf3, 0x6b, 0x82, 0x66, 0x6b, 0xa5, 0xca, 0x72, 0xf1, 0x56, 0x8e,
	0x31, 0xa9, 0x53, 0xce, 0x94, 0xbd, 0x51, 0x30, 0x58, 0xd0, 0xec, 0xd0, 0x74, 0xac, 0x0e, 0xb6,
	0x46, 0x5c, 0x69, 0x48, 0x79, 0x48, 0x93, 0x35, 0x77, 0xb7, 0xe0, 0x76, 0xae, 0x27, 0x2b, 0xfc,
	0x31, 0xc6, 0xb9, 0x8a, 0x20, 0x62, 0x12, 0x84, 0x7d, 0xaf, 0x89, 0xda, 0x9b, 0xfe, 0x66, 0xde,
	0xe9, 0xe7, 0x0d, 0xeb, 0x13, 0xc2, 0x0f, 0x04, 0x97, 0x41, 0x08, 0x42, 0x70, 0xa5, 0x38, 0xc8,
	0x20, 0xa5, 0x9a, 0xd9, 0xd5, 0x1c, 0xec, 0x1d, 0xe7, 0x8e, 0x7e, 0xcd, 0xdd, 0x3d, 0x13, 0x91,
	0x8a, 0xc6, 0x1e, 0x07, 0x22, 0xa8, 0x1e, 0x79, 0x6f, 0x58, 0x4c, 0xc3, 0x93, 0x3e, 0x0b, 0xff,
	0xcd, 0xdd, 0xc6, 0x09, 0x15, 0x49, 0xb7, 0x75, 0xcb, 0x3e, 0xad, 0x1f, 0xdf, 0x3b, 0xb8, 0xcc,
	0xb7, 0xcf, 0x42, 0x73, 0x31, 0x3b, 0x82, 0xcb, 0xd7, 0x6b, 0xce, 0xa7, 0x9a, 0x75, 0x9f, 0xae,
	0x42, 0x29, 0x4f, 0xea, 0xa8, 0x68, 0x4c, 0x32, 0xa2, 0x4c, 0x24, 0xc4, 0x64, 0xd2, 0x7b, 0x75,
	0xb1, 0x70, 0xd0, 0xe5, 0xc2, 0x41, 0x7f, 0x16, 0x0e, 0xfa, 0xb2, 0x74, 0x2a, 0x97, 0x4b, 0xa7,
	0xf2, 0x73, 0xe9, 0x54, 0x3e, 0x3c, 0x89, 0xb9, 0x1e, 0x4d, 0x07, 0x5e, 0x08, 0x82, 0xdc, 0x78,
	0xc1, 0x9d, 0x9b, 0x6f, 0x7d, 0x50, 0x2d, 0x22, 0x7b, 0xf1, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x8f,
	0xc6, 0xee, 0xa3, 0x0e, 0x03, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Admins) != len(that1.Admins) {
		return false
	}
	for i := range this.Admins {
		if this.Admins[i] != that1.Admins[i] {
			return false
		}
	}
	if this.AllowValidatorSelfExit != that1.AllowValidatorSelfExit {
		return false
	}
	return true
}
func (this *StakingParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StakingParams)
	if !ok {
		that2, ok := that.(StakingParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UnbondingTime != that1.UnbondingTime {
		return false
	}
	if this.MaxValidators != that1.MaxValidators {
		return false
	}
	if this.MaxEntries != that1.MaxEntries {
		return false
	}
	if this.HistoricalEntries != that1.HistoricalEntries {
		return false
	}
	if this.BondDenom != that1.BondDenom {
		return false
	}
	if !this.MinCommissionRate.Equal(that1.MinCommissionRate) {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowValidatorSelfExit {
		i--
		if m.AllowValidatorSelfExit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Admins) > 0 {
		for iNdEx := len(m.Admins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Admins[iNdEx])
			copy(dAtA[i:], m.Admins[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.Admins[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StakingParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinCommissionRate.Size()
		i -= size
		if _, err := m.MinCommissionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.BondDenom) > 0 {
		i -= len(m.BondDenom)
		copy(dAtA[i:], m.BondDenom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.BondDenom)))
		i--
		dAtA[i] = 0x2a
	}
	if m.HistoricalEntries != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.HistoricalEntries))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxEntries != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxEntries))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxValidators != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxValidators))
		i--
		dAtA[i] = 0x10
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.UnbondingTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.UnbondingTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintParams(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Admins) > 0 {
		for _, s := range m.Admins {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if m.AllowValidatorSelfExit {
		n += 2
	}
	return n
}

func (m *StakingParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.UnbondingTime)
	n += 1 + l + sovParams(uint64(l))
	if m.MaxValidators != 0 {
		n += 1 + sovParams(uint64(m.MaxValidators))
	}
	if m.MaxEntries != 0 {
		n += 1 + sovParams(uint64(m.MaxEntries))
	}
	if m.HistoricalEntries != 0 {
		n += 1 + sovParams(uint64(m.HistoricalEntries))
	}
	l = len(m.BondDenom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = m.MinCommissionRate.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admins = append(m.Admins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowValidatorSelfExit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowValidatorSelfExit = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakingParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.UnbondingTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValidators", wireType)
			}
			m.MaxValidators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxValidators |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEntries", wireType)
			}
			m.MaxEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxEntries |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoricalEntries", wireType)
			}
			m.HistoricalEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoricalEntries |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinCommissionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
